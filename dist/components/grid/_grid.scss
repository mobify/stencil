
// Neue Blank webfont
//
// In Android 2.3 through 4.4 it is not possible to remove whitespace between
// inline-block elements with CSS alone. We accomplish it by using a webfont
// which consists of a minimal set of zero-width characters. To ensure the font
// renders immediately, itâ€™s inlined as a data-uri.

@import 'neue-blank';


// Fallback variables

$font-family: "Helvetica Neue", Helvetica, Arial, sans-serif !default;
$font-size: 14px !default;
$line-height: $font-size * 1.5 !default;
$v-space: $line-height * 0.5 !default;


// Configurable variables
//
// Note: so that gutters are consistent by default, $v-space is used for both
// horizontal and vertical gutters. These can be changed by setting variables
// prior to import or by overriding/extending the component.

$grid-h-gutter: if( variable-exists(grid-h-gutter), $grid-h-gutter, $v-space );
$grid-v-gutter: if( variable-exists(grid-v-gutter), $grid-v-gutter, $v-space );


// Grid
//
// Grid system component for composing layouts. Build simple n-up grids of
// equal-size items or compose layouts using a formal grid system. Combine with
// dimension utilities for setting spans, or create a custom grid with a
// modifier and named spans.
//
// Markup:
// <div class="c-grid">
//     <div class="c-grid__span width-2of6">
//     <div class="c-grid__span width-3of6">
//     <div class="c-grid__span width-1of6">
// </div>


// Grid container
//
// Notes:
// 1. Account for elements that are not block by default.
// 2. Account for elements that may have margins and/or padding by default.
// 3. Remove horizontal space between spans in Android through version 4.2.
// 4. Remove horizontal space between spans in most browers.
// 5. Ensure grid spans begin at the correct side based on writing direction.

.c-grid {
    display: block; // 1
    margin: 0; // 2
    padding: 0; // 2
    font-family: 'neue-blank'; // 3
    font-size: 0; // 4
    text-align: initial; // 5
}

// Grid span
//
// Notes:
// 1. Lay out grid spans as inline-level boxes.
// 2. Grid spans are full-width by default.
// 3. Account for elements that may have margins and/or padding by default.
// 4. Restore font-family.
// 5. Restore font-size.
// 6. Ensure grid spans begin at the correct side based on writing direction.
// 7. Align grid spans to the top of the container, overriding default baseline
//    alignment.

.c-grid__span {
    display: inline-block; // 1
    box-sizing: border-box;
    width: 100%; // 2
    margin: 0; // 3
    padding: 0; // 3
    font-family: $font-family; // 4
    font-size: $font-size; // 5
    text-align: initial; // 6
    vertical-align: top; // 7
}


// Grid with horizontal and vertical gutters
//
// Markup:
// <div class="c-grid c--gutters">
//     <div class="c-grid__span">
//     <div class="c-grid__span">
//     <div class="c-grid__span">
// </div>
//
// 1. Prevent vertical space between grid rows from creating extra space above 
//    the top row by pulling the grid up to compensate. Using generated content 
//    allows margins to be set on the grid component without breaking it.

.c-grid.c--gutters {
    margin-left: $grid-h-gutter * -0.5;
    margin-right: $grid-h-gutter * -0.5;

    &:before {
        content: ' ';
        display: table;
        margin-top: $grid-v-gutter * -1; // 1
    }
}

.c-grid.c--gutters > .c-grid__span {
    padding: ($grid-v-gutter * 1) ($grid-h-gutter * 0.5) 0;
}
