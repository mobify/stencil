
$v-space: 1.5rem !default;
$grid-gutter: if( variable-exists(grid-gutter), $grid-gutter, $v-space );


// Grid
//
// Simple grid layout without gutters. Allows single or multiple grid rows.
// For asymmetrical grids, add modifiers to grid spans.
//
// Markup:
// <div class="c-grid c--{n}up">
//     <div class="c-grid__span">
//     <div class="c-grid__span">
//     <div class="c-grid__span">
// </div>

.c-grid {
  box-sizing: border-box;

    &:before,
    &:after {
      content: ' ';
      display: table;
    }

    &:after {
      clear: both;
    }
}

.c-grid__span {
    box-sizing: border-box;
    display: block;
    float: left;
    width: 100%;
}

@for $n from 2 through 6 {
    .c-grid.c--#{$n}up .c-grid__span {
        width: (100%/$n);

        &:nth-child(#{$n}n+1) {
            clear: both;
        }
    }
}



// Grid with horizontal and vertical gutters
//
// 1. Prevent horizontal gutters from creating extra space above the top row by
//    pulling the grid up. Applying the negative margin using generated content
//    frees us to apply spacing utils to the grid without breaking it.
//
// Markup:
// <div class="c-grid c--gutters">
//     <div class="c-grid__span">
//     <div class="c-grid__span">
//     <div class="c-grid__span">
// </div>

.c-grid.c--gutters {
    margin-left: $grid-gutter * -0.5;
    margin-right: $grid-gutter * -0.5;

    &:before {
      margin-top: $grid-gutter * -1; // 1
    }
}

.c-grid.c--gutters > .c-grid__span {
  padding: ($grid-gutter * 1) ($grid-gutter * 0.5) 0;
}
