
$v-space: 1.5rem !default;
$grid-gutter: if( variable-exists(grid-gutter), $grid-gutter, $v-space );


// Grid
//
// Simple grid layout without gutters. Allows single or multiple grid rows.
// @TODO: For asymmetrical grids, add modifiers to grid spans.
//
// Markup:
// <div class="c-grid c--{n}up">
//     <div class="c-grid__span">
//     <div class="c-grid__span">
//     <div class="c-grid__span">
// </div>

.c-grid {
    @include clearfix;

    box-sizing: border-box;
}

.c-grid__span {
    position: relative;
    float: left;

    box-sizing: border-box;    
    width: 100%;
}

@for $n from 2 through 6 {
    .c-grid.c--#{$n}up .c-grid__span {
        width: (100%/$n);

        &:nth-child(#{$n}n-#{$n - 1}) {
            clear: left;
        }
    }
}



// Grid with horizontal and vertical gutters
//
// 1. Prevent horizontal gutters from creating extra space above the top row by
//    pulling the grid up. Applying the negative margin using generated content
//    frees us to apply spacing utils to the grid without breaking it.
//
// Markup:
// <div class="c-grid c--gutters">
//     <div class="c-grid__span">
//     <div class="c-grid__span">
//     <div class="c-grid__span">
// </div>

.c-grid.c--gutters {
    &::before {
        margin-top: -$grid-gutter; // 1
    }

    > .c-grid__span {
        margin-top: $grid-gutter;
    }

    @for $n from 2 through 6 {
        &.c--#{$n}up {
            padding-left: $grid-gutter * ($n - 1);

            @for $i from 2 through $n {
                $idx: $i - 1;

                > .c-grid__span:nth-of-type(#{$n}n-#{$idx}) {
                    left: -($grid-gutter * $idx);
                }
            }
        }
    }
}